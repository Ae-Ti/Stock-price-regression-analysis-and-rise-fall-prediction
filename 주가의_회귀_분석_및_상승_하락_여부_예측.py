# -*- coding: utf-8 -*-
"""주가의 회귀 분석 및 상승/하락 여부 예측

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11trazV_n2tEyObRmmMdu_6NbjRJVF3T3
"""

# 본 프로젝트는 코랩 환경에서 코드가 작성되었습니다.
!pip install pandas-datareader
!pip install selenium beautifulsoup4
!pip install webdriver-manager
!apt-get update
!apt install chromium-chromedriver
!cp /usr/lib/chromium-browser/chromedriver /usr/bin

import pandas as pd
import numpy as np
import pandas_datareader.data as web
import requests

# 코랩 환경에서 야후 파이낸스 API를 가져오기 위한 헤더 튜닝
session = requests.session() 
session.headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'

# 야후 파이낸스 API로 애플의 5년간 주식 데이터 가져와 확인
apple = web.DataReader("AAPL", "yahoo",session = session)
print(apple)
print(apple.index)

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# 애플의 수정 종가 그래프 그리기(60일 간격으로 연도, 월, 일 출력)
plt.plot(apple.index, apple['Adj Close'])
plt.title("Apple Stock Price")
plt.grid()
plt.ylabel('stock price (USD)')

ax = plt.gca()
dateFmt = mdates.DateFormatter('%Y-%m-%d')
ax.xaxis.set_major_formatter(dateFmt)
ax.xaxis.set_major_locator(mdates.DayLocator(interval=60))
plt.xticks(rotation=90)
plt.show()

# 주피터 등의 환경에서 그래프 출력이 되지 않을 경우 작성한 코드
#apple_list = [item for item in apple.index]
#apple_date= []
#
#for i in range(len(apple_list)):
#    apple_date.append(apple_list[i].strftime('%Y-%m-%d'))
#print(apple_date)
#
#plt.plot(apple_date, apple['Adj Close'])
#plt.title("Apple Stock Price")
#plt.grid()
#plt.ylabel('stock price (USD)')
#
#ax = plt.gca()
#ax.set_xticks(np.arange(0,len(apple.index)+1,50))
#plt.xticks(rotation=90)
#plt.show()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# 주식 데이터를 입력 데이터와 라벨 데이터로 구분
data = apple.iloc[:, :6]
target = apple.iloc[:, 5]
print(data.shape)
print(target.shape)

# 입력 데이터를 window_size개로, 그 다음 라벨 데이터를 예측할 대상으로 설정해 데이터셋 구성
cur_X, cur_y = [], []
window_size = 60

for i in range(len(data) - window_size):
    X = data.iloc[i:i + window_size, :]
    y = target.iloc[i + window_size]

    cur_X.append(X)
    cur_y.append(y)

cur_X = np.array(cur_X)
cur_y = np.array(cur_y)

# 데이터 크기 표준화를 위한 입력 데이터 2차원 재배치
cur_X = cur_X.reshape(-1, window_size)
print(cur_X.shape)
print(cur_y.shape)

# 데이터 크기 표준화 및 훈련 데이터와 테스트 데이터의 구분
scaler = StandardScaler()

train_lenX=int(len(cur_y)*0.8)*6
train_leny=int(len(cur_y)*0.8)

X_train, y_train = scaler.fit_transform(cur_X[:train_lenX]), cur_y[:train_leny]
X_test, y_test = scaler.transform(cur_X[train_lenX:]), cur_y[train_leny:]
print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)
print(X_test)

# 데이터 크기 표준화 후 입력 데이터의 3차원 재배치
X_train = X_train.reshape(-1,window_size,6)
X_test = X_test.reshape(-1,window_size,6)
print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)

from tensorflow.keras import layers, Sequential
from tensorflow.keras.optimizers import Adam
import tensorflow as tf
from keras.callbacks import ModelCheckpoint, EarlyStopping

# 딥러닝 주가 예측을 위한 GRU 모델의 구성
model = Sequential()
model.add(layers.GRU(256, input_shape = (window_size, X_train[0].shape[1]), return_sequences=True))
model.add(layers.GRU(64, activation='relu'))
model.add(layers.Dense(1024, activation = 'relu'))
model.add(layers.Dense(512, activation = 'relu'))
model.add(layers.Dense(64, activation = 'relu'))
model.add(layers.Dense(1))

optimizer = Adam(learning_rate = 0.001)
model.compile(optimizer=optimizer,loss="mse")
earlystopping = EarlyStopping(monitor='loss', patience=7)
checkpoint = ModelCheckpoint(filepath = '{epoch:02d}-{loss:.5f}.h5', monitor='loss', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', save_freq='epoch')

model.fit(X_train, y_train, batch_size=16, epochs=50, shuffle=True, verbose=2, callbacks = [earlystopping, checkpoint])

# 저장된 모델 불러오기 및 평가
model = tf.keras.models.load_model('/content/17-5.16857.h5') # 저장된 모델 중 가장 성능이 좋은 모델 입력
test_loss = model.evaluate(X_test, y_test, verbose=0)
print("GRU 모델 테스트 loss: {:.5f}".format(test_loss))

# 그래프를 통한 예측값과 실제값의 비교와 내일 주가의 예측
pred_date = apple.index[-y_test.shape[0]:]
pred_y = model.predict(X_test)

plt.plot(pred_date, y_test, color='red', label='real stock price')
plt.plot(pred_date, pred_y, color='blue', label='predicted stock price')
plt.legend()

plt.grid()
plt.title('Apple Stock Price Prediction')
plt.ylabel('stock price (USD)')

ax = plt.gca()
dateFmt = mdates.DateFormatter('%Y-%m-%d')
ax.xaxis.set_major_formatter(dateFmt)
ax.xaxis.set_major_locator(mdates.DayLocator(interval=15))
plt.xticks(rotation=90)
plt.show()

print('Tomorrow Apple stock price: {}USD'.format(model.predict(X_test)[-1]))

# 예측한 주가와 당일 주가, 그리고 전일 주가의 각각의 차이 비교 (평균값)
pred_tdy_diff = []
pred_yst_diff = []
tdy_yst_diff = []

for i in range(len(y_test)):
  pred_tdy_diff.append(float(abs(pred_y[i] - y_test[i])))
  pred_yst_diff.append(float(abs(pred_y[i] - y_test[i-1])))
  tdy_yst_diff.append(float(abs(y_test[i] - y_test[i-1])))

print('Difference in stock price (average value): prediction, today\'s actual and yesterday\'s actual\n')
print('Difference between prediction and today: {:.2f} USD'.format(sum(pred_tdy_diff)/len(pred_tdy_diff)))
print('Difference between prediction and yesterday: {:.2f} USD'.format(sum(pred_yst_diff)/len(pred_yst_diff)))
print('Difference between yesterday and today: {:.2f} USD'.format(sum(tdy_yst_diff)/len(tdy_yst_diff)))

from sys import executable
import time
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup
import re

# 코랩에서 셀레니움을 사용하기 위한 설정
options = webdriver.ChromeOptions()
options.add_argument('--headless')        
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
driver = webdriver.Chrome('chromedriver', options=options)

# 뉴스 데이터를 얻기 위한 웹 크롤링 수행
source_url = 'https://finance.yahoo.com/quote/AAPL/news'
driver.get(source_url)

req = driver.page_source
soup = BeautifulSoup(req, 'html.parser')
contents = soup.select_one('#mrt-node-latestQuoteNewsStream-0-Stream')
contents_li = contents.select('li')
page_url_base = 'https://finance.yahoo.com/'

# 애플의 최근 뉴스 기사의 제목과 링크 추출
page_urls = []
title = []

for index in range(0, len(contents_li)):
  li_url = contents_li[index].select_one('a')
  title.append(li_url.get_text())
  if len(li_url) > 0:
    page_urls.append(page_url_base + li_url.get('href'))

print('Latest News : Apple\n')
for i in range(0, len(contents_li)):
  print(title[i],':',page_urls[i])

# 주가 데이터에 60일간의 주가평균 열 추가
mean_60 = apple['Adj Close'].rolling(window=60).mean()
apple.insert(len(apple.columns), 'MN_60', mean_60)

# 주가이동평균선(60일)의 그래프 시각화
plt.plot(apple.index, apple['Adj Close'], label = 'Adj Close')
plt.plot(apple.index, apple['MN_60'], label = 'MN 60')
plt.legend()

plt.title("Apple Stock Price Moving Average")
plt.ylabel('stock price (USD)')
plt.grid()

ax = plt.gca()
dateFmt = mdates.DateFormatter('%Y-%m-%d')
ax.xaxis.set_major_formatter(dateFmt)
ax.xaxis.set_major_locator(mdates.DayLocator(interval=60))
plt.xticks(rotation=90)
plt.show()

# 미 기준금리 데이터 가져오기
base_rate = pd.read_csv('/content/DFEDTARU.csv') # 'https://fred.stlouisfed.org/series/DFEDTARU'에서 다운로드

# 기준금리 데이터 인덱스를 애플 주가의 데이터 인덱스와 비교해 행 삭제 후 저장
print(base_rate['DATE'][0])
print(apple.index[0])

base_rate = np.array(base_rate)

for i in range(len(apple.index)):
  while (base_rate[i] != apple.index.astype(str)[i])[0]:
    base_rate = np.delete(base_rate, i , axis = 0)

print(base_rate[0])

base_rate = pd.DataFrame(base_rate)
base_rate.to_csv('/content/base_rate')

# 미 기준금리의 그래프 시각화
plt.plot(apple.index, base_rate[1])
plt.title("Base Rate")
plt.ylabel('%')
plt.grid()

ax = plt.gca()
dateFmt = mdates.DateFormatter('%Y-%m-%d')
ax.xaxis.set_major_formatter(dateFmt)
ax.xaxis.set_major_locator(mdates.DayLocator(interval=60))
plt.xticks(rotation=90)
plt.show()

# 야후 파이낸스 API로 5년간 원유 가격의 데이터를 가져와 확인
crude_oil = web.DataReader("CL=F", "yahoo",session = session)
print(crude_oil)
print(crude_oil.index)

# 원유 가격의 그래프 시각화
plt.plot(crude_oil.index, crude_oil['Adj Close'])
plt.title("Crud Oil Price")
plt.ylabel('price (USD)')
plt.grid()

ax = plt.gca()
dateFmt = mdates.DateFormatter('%Y-%m-%d')
ax.xaxis.set_major_formatter(dateFmt)
ax.xaxis.set_major_locator(mdates.DayLocator(interval=60))
plt.xticks(rotation=90)
plt.show()

# 야후 파이낸스 API로 5년간 나스닥 종합 주가 지수의 데이터를 가져와 확인
Nasdaq = web.DataReader("^IXIC", "yahoo",session = session)
print(Nasdaq)
print(Nasdaq.index)

# 나스닥 종합 주가 지수의 그래프 시각화
plt.plot(Nasdaq.index, Nasdaq['Adj Close'])
plt.title("Nasdaq Composite Stock Index")
plt.ylabel('price (USD)')
plt.grid()

ax = plt.gca()
dateFmt = mdates.DateFormatter('%Y-%m-%d')
ax.xaxis.set_major_formatter(dateFmt)
ax.xaxis.set_major_locator(mdates.DayLocator(interval=60))
plt.xticks(rotation=90)
plt.show()

# 분석 종합 그래프로 분석
f, axes = plt.subplots(2, 2)
f.set_size_inches((18,15))
plt.subplots_adjust(wspace = 0.15, hspace = 0.3)
f.suptitle('Comprehensive Analysis Graph', fontsize = 30)

# 1번째 그래프
plt.subplot(221)
plt.plot(apple.index, apple['Adj Close'], label = 'Adj Close')
plt.plot(apple.index, apple['MN_60'], label = 'MN 60')
plt.legend()

plt.title("Apple Stock Price Moving Average")
plt.ylabel('stock price (USD)')
plt.grid()

ax = plt.gca()
dateFmt = mdates.DateFormatter('%Y-%m-%d')
ax.xaxis.set_major_formatter(dateFmt)
ax.xaxis.set_major_locator(mdates.DayLocator(interval=60))
plt.xticks(rotation=90)

# 2번째 그래프
plt.subplot(222)
plt.plot(apple.index, base_rate[1])

plt.title("Base Rate")
plt.ylabel('%')
plt.grid()

ax = plt.gca()
dateFmt = mdates.DateFormatter('%Y-%m-%d')
ax.xaxis.set_major_formatter(dateFmt)
ax.xaxis.set_major_locator(mdates.DayLocator(interval=60))
plt.xticks(rotation=90)

# 3번째 그래프
plt.subplot(223)
plt.plot(crude_oil.index, crude_oil['Adj Close'])

plt.title("Crud Oil Price")
plt.ylabel('price (USD)')
plt.grid()

ax = plt.gca()
dateFmt = mdates.DateFormatter('%Y-%m-%d')
ax.xaxis.set_major_formatter(dateFmt)
ax.xaxis.set_major_locator(mdates.DayLocator(interval=60))
plt.xticks(rotation=90)

# 4번째 그래프
plt.subplot(224)
plt.plot(Nasdaq.index, Nasdaq['Adj Close'])

plt.title("Nasdaq Composite Stock Index")
plt.ylabel('price (USD)')
plt.grid()

ax = plt.gca()
dateFmt = mdates.DateFormatter('%Y-%m-%d')
ax.xaxis.set_major_formatter(dateFmt)
ax.xaxis.set_major_locator(mdates.DayLocator(interval=60))
plt.xticks(rotation=90)
plt.show()